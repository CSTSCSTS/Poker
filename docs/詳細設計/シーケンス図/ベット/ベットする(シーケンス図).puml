@startuml

actor ユーザー

boundary handleSubmit
boundary handleToChange
boundary handlePlaySubmit
boundary handleSurrenderSubmit
participant PokerController
participant MoneyController
participant PokerService
participant MoneyService
participant MoneyRepository
participant Money
database Possession_money


ユーザー -> handleSubmit : ベットボタンをクリック
handleSubmit -> ユーザー : ベット画面にエラー表示
note left : 必須チェック・0円チェック・所持金チェックを\n実施して、いずれかにひっかかった場合
handleSubmit -> PokerController : ポーカー開始のためのPOSTリクエスト
PokerController -> PokerService : PokerPlayingInfo pokerPrepare(boolean jokerIncluded)
note left: 1.ポーカーの準備\nメソッド呼ぶ
PokerService -> PokerController : return PokerPlayingInfo.builder().build()
note right: 戻り値のPokerPlayingInfoの中には、以下の情報が入っている。\n・山札\n・プレイヤーの手札\n・CPUの手札
PokerController -> ユーザー : ポーカープレイ画面にプレイヤー・CPUの手札を表示

ユーザー -> handleToChange : 手札交換ボタンをクリック
handleToChange -> PokerController : ポーカーの手札交換のためのPOSTリクエスト
PokerController -> PokerService : PokerPlayingInfo handChangeAfterProcess(PokerPlayingInfo.builder().build())
note right: プレイヤー・CPU双方の手札交換、役判定、勝者判定を実施するメソッドを呼ぶ
PokerService -> PokerController : return PokerPlayingInfo.builder().build()
note right: 戻り値のPokerPlayingInfoの中には、以下の情報が入っている。\n・山札\n・プレイヤーの手札\n・CPUの手札\n・山札\n・プレイヤーの役\n・CPUの役\n・勝者\n・手札交換済みフラグ
PokerController -> ユーザー : ポーカープレイ画面に勝負するかしないかの選択ボタンを表示

alt 勝負する
  ユーザー -> handlePlaySubmit : 勝負するボタンをクリック
  handlePlaySubmit -> MoneyController : 所持金更新のためのPOSTリクエスト
  MoneyController -> MoneyService : Possession_money update(Winner winner, int userId, BigDecimal betMoney);
  MoneyService -> MoneyRepository : getPossession_money(int userId)
  MoneyRepository -> Possession_money : SELECT
  MoneyRepository --> MoneyService : return Possession_money
  alt プレイヤーが勝者
    MoneyService -> Money : void plusMoney(BigDecimal betMoney)
    MoneyService -> MoneyRepository : updatePossession_money(Money money)
    MoneyRepository -> Possession_money : UPDATE
    MoneyService --> MoneyController : return Possession_money
  else CPUが勝者
    MoneyService -> Money : void minusMoney(BigDecimal betMoney)
    MoneyService -> MoneyRepository : updatePossession_money(Money money)
    MoneyRepository -> Possession_money : UPDATE
    MoneyService --> MoneyController : return Possession_money
  end
  handlePlaySubmit -> ユーザー : 勝負結果を表すメッセージ・もう一度ボタン・スタートに戻るボタンを表示する。
else 勝負しない
  ユーザー -> handleSurrenderSubmit : 勝負しないボタンをクリック
  handleSurrenderSubmit -> ユーザー : 勝負しなかったことを表すメッセージ・もう一度ボタン・スタートに戻るボタンを表示する。
end


@enduml