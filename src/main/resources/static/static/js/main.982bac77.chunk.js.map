{"version":3,"sources":["logo.svg","pokerField.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PokerField","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","stateReset","playerHands","computerHands","setState","isFinishedChange","playerRole","computerRole","winner","handsChange","setHands","hand","isChange","currentHands","state","targetIndex","findIndex","h","type","number","splice","deck","location","fieldInfo","react_default","a","createElement","reactstrap_es","className","pokerField_CpuHands","hands","pokerField_WinOrLossJudge","pokerField_PlayerHands","pokerField_HandChangeButton","pokerField_AfterPokerPlayingButtons","jokerIncluded","history","Component","CpuHands","id","cpuHands","i","text","push","WinOrLossJudge","roleName","PlayerHands","_this2","map","pokerField_Hand","Hand","changeStatus","_this3","color","size","block","onClick","HandChangeButton","handleToChange","request","require","url","window","post","send","jsonPlayerHands","JSON","stringify","_this4","jsonDeck","jsonComputerHands","then","res","pokerInfo","body","finishedChange","AfterPokerPlayingButtons","pokerField_RetryButton","pokerField_RestartButton","RetryButton","handleToRePlay","_this5","e","_this6","preventDefault","toString","slice","responseType","handleSubmit","bind","RestartButton","handleToRestart","_this7","pathname","withRouter","App","BrowserRouter","Switch","Route","exact","path","component","PokerStart","handleToPlay","event","target","value","onChange","handleChange","name","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.982bac77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input } from 'reactstrap';\r\nimport App from './App'\r\nimport { withRouter } from 'react-router'\r\nimport './pokerField.css';\r\n\r\nclass PokerField extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n      this.state = {\r\n        deck: this.props.location.state.fieldInfo.deck,\r\n        playerHands: this.props.location.state.fieldInfo.playerHands,\r\n        computerHands: this.props.location.state.fieldInfo.computerHands,\r\n        isFinishedChange: this.props.location.state.isFinishedChange,\r\n        playerRole: null,\r\n        computerRole: null,\r\n        winner: null\r\n\t  };\r\n\t}\r\n\r\n\tstateReset = (playerHands, computerHands) => {\r\n\t\tthis.setState({\r\n\t\t  playerHands: playerHands,\r\n      computerHands: computerHands,\r\n      isFinishedChange: false,\r\n      playerRole: null,\r\n      computerRole: null,\r\n      winner: null})\r\n\t}\r\n\r\n\thandsChange = (playerHands, computerHands, isFinishedChange, playerRole, computerRole, winner) => {\r\n\t  this.setState({\r\n\t    playerHands: playerHands,\r\n        computerHands: computerHands,\r\n        isFinishedChange: isFinishedChange,\r\n        playerRole: playerRole,\r\n        computerRole: computerRole,\r\n        winner: winner})\r\n\t}\r\n\r\n\tsetHands = (hand) => {\r\n\t  hand.isChange = !hand.isChange;\r\n\t  var currentHands = this.state.playerHands;\r\n\t  const targetIndex = currentHands.findIndex((h) => {\r\n\t\t  return(h.type === hand.type && h.number === hand.number);\r\n\t  })\r\n\t  currentHands.splice(targetIndex, 1, hand);\r\n\t  this.setState({playerHands: currentHands})\r\n\t}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container className=\"poker_field\">\r\n          <ul>\r\n\t       <CpuHands\r\n\t    \t  hands={this.state.computerHands}\r\n\t    \t  isFinishedChange={this.state.isFinishedChange}\r\n\t    \t />\r\n\t    \t<WinOrLossJudge\r\n\t          playerRole={this.state.playerRole}\r\n\t    \t  computerRole={this.state.computerRole}\r\n\t    \t  winner={this.state.winner}\r\n\t    \t/>\r\n\t    \t<PlayerHands\r\n\t    \t  playerHands={this.state.playerHands}\r\n\t        setHands={this.setHands}\r\n\t    \t  isFinishedChange={this.state.isFinishedChange}\r\n\t    \t/>\r\n\t       </ul>\r\n\t      </Container>\r\n        <HandChangeButton\r\n          deck={this.state.deck}\r\n          playerHands={this.state.playerHands}\r\n          computerHands={this.state.computerHands}\r\n          isFinishedChange={this.state.isFinishedChange}\r\n          handsChange={this.handsChange}\r\n        />\r\n        <AfterPokerPlayingButtons\r\n\t        stateReset={this.stateReset}\r\n\t        jokerIncluded={this.props.jokerIncluded}\r\n\t        history={this.props.history}\r\n\t        isFinishedChange={this.state.isFinishedChange}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass CpuHands extends Component {\r\n  render() {\r\n\tif(!this.props.isFinishedChange) {\r\n\t  return (\r\n\t\t<div id=\"computer_hands\">\r\n\t\t  <li className=\"behind_hand\"></li>\r\n\t\t  <li className=\"behind_hand\"></li>\r\n\t\t  <li className=\"behind_hand\"></li>\r\n\t\t  <li className=\"behind_hand\"></li>\r\n\t\t  <li className=\"behind_hand\"></li>\r\n\t\t</div>\r\n\t  );\r\n\t}\r\n    const cpuHands =[];\r\n    for(var i in this.props.hands) {\r\n      const text = this.props.hands[i].type === 'JOKER' ? 'JOKER': this.props.hands[i].type+'の'+this.props.hands[i].number;\r\n      cpuHands.push(\r\n        <li className=\"hand_item\">\r\n          <div className=\"hand\">\r\n            <h3>{text}</h3>\r\n          </div>\r\n        </li>\r\n      )\r\n    }\r\n    return (\r\n      <div id=\"computer_hands\">\r\n      \t<ul>\r\n      \t  {cpuHands}\r\n      \t</ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass WinOrLossJudge extends Component {\r\n  render() {\r\n\t  if(this.props.playerRole === null) {\r\n\t    return null;\r\n      } else if(this.props.winner === 'NOTHING') {\r\n    \treturn (\r\n\t      <div>\r\n\t        <h3 id=\"computer_role\">CPUの役: {this.props.computerRole.roleName}</h3>\r\n\t        <h3 id=\"result\">引き分けです</h3>\r\n\t        <h3 id=\"player_role\">プレイヤーの役: {this.props.playerRole.roleName}</h3>\r\n\t      </div>\r\n\t    )\r\n      }\r\n\r\n    return (\r\n      <div id=\"win_or_loss_judge\">\r\n        <h3 id=\"computer_role\">CPUの役: {this.props.computerRole.roleName}</h3>\r\n        <h3 id=\"result\">{this.props.winner}の勝利です</h3>\r\n        <h3 id=\"player_role\">プレイヤーの役: {this.props.playerRole.roleName}</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass PlayerHands extends Component {\r\n  render() {\r\n    const playerHands = this.props.playerHands.map((hand) => {\r\n      return(\r\n        <li className=\"hand_item\">\r\n          <Hand hand={hand} setHands={this.props.setHands} isFinishedChange={this.props.isFinishedChange}/>\r\n        </li>\r\n      );\r\n    });\r\n    return (\r\n      <div id=\"player_hands\">\r\n      \t<ul>\r\n      \t  {playerHands}\r\n      \t</ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Hand extends Component {\r\n\r\n\tchangeStatus = () => {\r\n\t  this.props.setHands(this.props.hand);\r\n\t}\r\n\r\n render() {\r\n\tconst text = this.props.hand.type === 'JOKER' ? 'JOKER': this.props.hand.type+'の'+this.props.hand.number;\r\n\tif(this.props.isFinishedChange) {\r\n\t  return (\r\n\t\t<div className=\"hand\">\r\n\t      <h3>{text}</h3>\r\n\t    </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"hand\">\r\n      \t<h3>{text}</h3>\r\n      \t<Button color=\"warning\" size=\"lg\" block onClick={this.changeStatus}> {this.props.hand.isChange == true ? '交換' : 'キープ'} </Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass HandChangeButton extends Component {\r\n\thandleToChange = () => {\r\n\t  var request = require('superagent');\r\n\t  const url = window.location;\r\n\t  request\r\n\t    .post(url)\r\n\t    .type('form')\r\n\t    .send({jsonPlayerHands: JSON.stringify(this.props.playerHands),\r\n\t    \t   jsonDeck: JSON.stringify(this.props.deck),\r\n\t    \t   jsonComputerHands: JSON.stringify(this.props.computerHands)})\r\n\t    .then(res => {\r\n\t      const pokerInfo = res.body;\r\n\t      this.props.handsChange(\r\n\t        pokerInfo.playerHands,\r\n\t        pokerInfo.computerHands,\r\n\t        pokerInfo.finishedChange,\r\n\t        pokerInfo.playerRole,\r\n\t        pokerInfo.computerRole,\r\n\t        pokerInfo.winner);\r\n\t    });\r\n\t}\r\n\r\n  render() {\r\n    if(this.props.isFinishedChange) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div id=\"hand_change\">\r\n\t    <Button onClick={this.handleToChange}>\r\n\t      勝負\r\n\t    </Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass AfterPokerPlayingButtons extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"after_poker_playing_buttons\">\r\n\t\t  <RetryButton\r\n\t        stateReset={this.props.stateReset}\r\n\t        jokerIncluded={this.props.jokerIncluded}\r\n\t        history={this.props.history}\r\n\t        isFinishedChange={this.props.isFinishedChange}\r\n\t\t />\r\n\t\t <RestartButton\r\n\t\t   history={this.props.history}\r\n\t\t   jokerIncluded={this.props.jokerIncluded}\r\n\t\t   isFinishedChange={this.props.isFinishedChange}\r\n\t\t / >\r\n\t </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass RetryButton extends Component {\r\n\r\n\t handleSubmit(e) {\r\n    \tvar request = require('superagent');\r\n        e.preventDefault();\r\n        var currentUrl = window.location.toString();\r\n        const url = currentUrl.slice(0, -4) + 'config';\r\n        request\r\n        .post(url)\r\n        .responseType('text')\r\n        .type('form')\r\n        .send({jokerIncluded: this.props.jokerIncluded})\r\n        .then(res => {\r\n          const pokerInfo = res.body;\r\n          this.handleToRePlay(pokerInfo.playerHands, pokerInfo.computerHands);\r\n        });\r\n      }\r\n        handleToRePlay = (playerHands, computerHands) => {\r\n          this.props.stateReset(playerHands, computerHands);\r\n        }\r\n\r\n  render() {\r\n    if(!this.props.isFinishedChange) {\r\n\t  return null;\r\n\t}\r\n\r\n    return (\r\n\t    <Button onClick={this.handleSubmit.bind(this)}>\r\n\t      もう一度\r\n\t    </Button>\r\n    )\r\n  }\r\n}\r\n\r\nclass RestartButton extends Component {\r\n\r\n\thandleToRestart = (body) => {\r\n\t\tthis.props.history.push({\r\n\t\t\tpathname: '/'\r\n\t\t})\r\n    }\r\n  render() {\r\n    if(!this.props.isFinishedChange) {\r\n\t  return null;\r\n\t}\r\n    return (\r\n\t    <Button onClick={this.handleToRestart.bind(this)}>\r\n\t      スタートに戻る\r\n\t    </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(PokerField);","import React, { Component } from 'react';\nimport './pokerStart.css';\nimport logo from './logo.svg';\nimport './App.css';\nimport PokerField from './pokerField';\nimport { withRouter } from 'react-router';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input } from 'reactstrap';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n          <div>\n            <Switch>\n              <Route exact path={'/'} component={PokerStart}/>\n              <Route exact path={'/play'} component={PokerField}/>\n            </Switch>\n          </div>\n        </BrowserRouter>\n    );\n  }\n}\n\nclass PokerStart extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokerIncluded: true\n    };\n  }\n\n  handleSubmit(e) {\n\tvar request = require('superagent');\n    e.preventDefault();\n    const url = window.location + 'config';\n    request\n    .post(url)\n    .responseType('text')\n    .type('form')\n    .send({jokerIncluded: this.state.jokerIncluded})\n    .then(res => {\n      this.handleToPlay(res.body, this.state.jokerIncluded);\n\n    });\n  }\n    handleToPlay = (body, jokerIncluded) => {\n    \tthis.props.history.push({\n    \t\tpathname: '/play',\n    \t\tstate: {fieldInfo: body, jokerIncluded: jokerIncluded}\n    \t})\n    }\n\n  handleChange(event) {\n\tconst jokerIncluded = event.target.value == 'included' ? true : false;\n    this.setState({jokerIncluded: jokerIncluded});\n  }\n\n  render() {\n    return (\n      <div>\n      \t<h1 id=\"title\">茶 圓 ポ ー カ ー</h1>\n\t    <Container id=\"form\">\n\t      <Form>\n\t        <FormGroup>\n\t          <Input type=\"select\" onChange={this.handleChange.bind(this)} name=\"select\" id=\"exampleSelect\">\n\t            <option value=\"included\">ジョーカーを含む</option>\n\t            <option value=\"non-included\">ジョーカーを含まない</option>\n\t          </Input>\n\t        </FormGroup>\n\t    \t<Button color=\"primary\" size=\"lg\" block onClick={this.handleSubmit.bind(this)}>START</Button>\n\t      </Form>\n\t    </Container>\n\t  </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}